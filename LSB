from PIL import Image
import numpy as np

def load_image(image_path):
    image = Image.open(image_path)
    return np.array(image)

def encode_message(image, message):
    binary_message = ''.join(format(ord(char), '08b') for char in message)
    binary_message += '1111111111111110'  # Delimiter to mark the end of the message
    
    data_index = 0
    for values in image:
        for pixel in values:
            for color in range(3):  # Iterate through RGB values
                if data_index < len(binary_message):
                    pixel[color] = int(bin(pixel[color])[2:9] + binary_message[data_index], 2)
                    data_index += 1

    return image

def save_image(image, output_path):
    encoded_image = Image.fromarray(image)
    encoded_image.save(output_path)

def decode_message(encoded_image):
    binary_data = ""
    for values in encoded_image:
        for pixel in values:
            for color in range(3):  # Iterate through RGB values
                binary_data += bin(pixel[color])[2:][-1]  # Extract the least significant bit

    # Split by 8-bits
    all_bytes = [binary_data[i: i+8] for i in range(0, len(binary_data), 8)]
    
    decoded_message = ""
    for byte in all_bytes:
        if byte == '11111111':
            break
        decoded_message += chr(int(byte, 2))

    return decoded_message

# Example usage:
image_path = r"C:\Users\datta\OneDrive\Desktop\Kinadmiral\Rand\prac\testi.png"
output_path = r"C:\Users\datta\OneDrive\Desktop\Kinadmiral\Rand\prac\testit.png"
message = "hello this is a secret"

# Load the image
image = load_image(image_path)

# Encode the message into the image
encoded_image = encode_message(image, message)

# Save the encoded image
save_image(encoded_image, output_path)

# Load the encoded image
encoded_image = load_image(output_path)

# Decode the message from the image
decoded_message = decode_message(encoded_image)
print("Decoded message:", decoded_message)
